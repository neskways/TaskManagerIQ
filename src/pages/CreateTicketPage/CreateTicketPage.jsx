import s from "./CreateTicketPage.module.scss";
import Cookies from "js-cookie";
import { Link } from "react-router-dom";
import { useState, useEffect } from "react";
import { Input } from "../../UI/Input/Input";
import { Button } from "../../UI/Button/Button";
import { Selector } from "../../UI/Selector/Selector";
import { PageTitle } from "../../components/PageTitle/PageTitle";
import { getClientsForSearch } from "../../api/getClientsForSearch";
import { getClientConfigurations } from "../../api/getClientConfigurations";
import { MultipleInput } from "../../UI/MultipleInput/MultipleInput";
import { ClientSearch } from "./components/ClientSearch/ClientSearch";
import { getFromLocalStorage } from "../../modules/localStorageUtils";
import { departmentsItems, executorsItems } from "../../modules/Arrays";
import { ContentWrapper } from "../../UI/ContentWrapper/ContentWrapper";

export const CreateTicketPage = () => {
  const lastSecondaryPath = getFromLocalStorage("last_secondary_sidebar_path");

  const [clients, setClients] = useState([]);
  const [selectedClient, setSelectedClient] = useState(null);
  const [selectedDept, setSelectedDept] = useState("");
  const [selectedExecutor, setSelectedExecutor] = useState("");
  const [configurations, setConfigurations] = useState([]); // üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
  const [selectedConfig, setSelectedConfig] = useState(""); // üîπ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const [loading, setLoading] = useState(true);

  const role = Cookies.get("role");
  const showIspol = role === "–î–µ–∂—É—Ä–Ω—ã–π" || role === "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å";

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
  useEffect(() => {
    const loadClients = async () => {
      const data = await getClientsForSearch();
      setClients(data);
      setLoading(false);
    };
    loadClients();
  }, []);

  // –ö–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const handleSelectClient = async (client) => {
    setSelectedClient(client);
    setSelectedConfig("");
    setConfigurations([]); // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ

    console.log("–í—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç:", client);
    const configs = await getClientConfigurations(client.code);
    console.log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:", configs);
    setConfigurations(configs);
  };

  const filteredExecutors = selectedDept
    ? executorsItems.filter((ex) => ex.department === Number(selectedDept))
    : [];

  return (
    <ContentWrapper>
      <PageTitle titleText="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞" center />
      <form>
        <Input text="–ó–ê–ì–û–õ–û–í–û–ö" />

        <div
          className={`${s.filling_data_inner} ${showIspol ? "" : s.disable}`}
        >
          <ClientSearch
            clients={clients}
            onSelect={handleSelectClient}
            text="–ö–õ–ò–ï–ù–¢"
            disabled={loading}
          />

          {showIspol && (
            <Selector
              items={departmentsItems}
              value={selectedDept}
              title="–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨"
              onChange={(val) => {
                setSelectedDept(val);
                setSelectedExecutor("");
              }}
            />
          )}
        </div>

        <MultipleInput text="–¢–ï–ö–°–¢" rows={5} />

        <div className={s.filling_data_inner}>
          <Selector
            items={configurations.map((c) => ({
              id: c.id,
              name: c.name,
            }))}
            value={selectedConfig}
            title="–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø"
            onChange={setSelectedConfig}
          />

          <Input text="–ö–û–ù–¢–ê–ö–¢–´" placeholder="+7 999 666 99 99" />
        </div>

        <div className={s.button_wrap}>
          <Button name="–°–æ–∑–¥–∞—Ç—å" type="submit" />
        </div>

        <Link to={lastSecondaryPath} className={s.return_button}>
          –û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç
        </Link>
      </form>
    </ContentWrapper>
  );
};
